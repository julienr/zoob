package zoob;

enum ServerState {
  WARM_UP=0;
  ROUND_WARM_UP=1;
  IN_ROUND=2;
  GAME_FINISHED=3;
}

//Sent from client to server when client is first connecting
message Hello {
  required string nickname = 1;
}

//Sent from server to client in response to a Hello
message Welcome {
  required bytes level = 1; //the zipped JSON level
  required ServerState state = 2;
  required int32 id = 3; //player id
}

//Sent from server to client to notify the client that it will be disconnected
message Kicked {
  required string reason = 1;
}

//Sent from client to server to request to join the game
message Join {
}

//Sent from server to client to notify the client that it has succesfully joined
message Joined {
}

//Sent from server to client. Client wanted to join, but it failed
message NotJoined {
}

//-- GENERAL TYPES
message Vector {
  optional float x = 1 [default = 0];
  optional float y = 2 [default = 0];
}

//-- IMPORTANT GAMESTATE Messages

message Spawn {
  required Vector position = 1;
}

//An explosion occured. It might be caused by either a rocket or a mine
message Explosion {
  required Vector position = 1;
  required int32 entityId = 2; //the entity that caused the explosion (rocket or mine)
  optional bool destroyCause = 3 [default = true]; //indicate wether the cause entity for that explosion should be destroyed
  //list of damaged entities
  repeated Dammage dammages = 4;
}

//Represent a dammage caused to an entity
message Dammage {
  required int32 entityId = 1;
  required int32 damage = 2;
}

//-- SEQUENCED UNRELIABLE GAMESTATE Messages
message RocketInfo {
  required int32 rocketId = 1;
  required Vector position = 2;
  required Vector velocity = 3;
}

message MineInfo {
  required int32 mineId = 1;
  required Vector position = 2;
}

message PlayerInfo {
  required int32 playerId = 1;
  required Vector position = 2;
  required Vector velocity = 3;
  repeated RocketInfo rockets = 4;
  repeated MineInfo mines = 5;
}

message GameState {
  repeated PlayerInfo players = 1;
}

//-- SERVER STATE CHANGES
message StateChange {
  required ServerState newState = 1;
  optional int32 stateDuration = 2; //the expected duration of this state (only relevant for ROUNDSTART and GAME_FINISHED countdown)
}


